<?php
// $Id: fbstatus.module,v 1.3.2.4 2009/02/22 18:13:49 yelvington Exp $
/**
 * @file
 * Fetches Facebook status and provides a block. This is intended for use
 * on a single-user Drupal blog site.
 */

/*
 * This is the Drupal 6 version
 */


/**
 * Implementation of hook_perm()
 */
function fbstatus_perm() {
  return array('access fbstatus', 'administer fbstatus');
}


/**
 * Implementation of hook_block()
 */

function fbstatus_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0] = array('info' => t('Facebook status'),
      'weight' => 0, 'enabled' => 1, 'region' => 'left');
    return $blocks;
  }
  else if ($op == 'view') {
    $block = array(
       'subject' => t(''), // title is blank by default
       'content' => _fbstatus_get_status()
        );
    return $block;

  }
}

/**
 * Implementation of hook_admin()
 */
function fbstatus_admin() {
  $form['fbstatus_url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL of your Facebook status feed'),
    '#default_value' => variable_get('fbstatus_url', ''),
    '#size' => 60,
    '#maxlength' => 256,
    '#description' => t('The RSS feed of your Facebook status updates.')
  );
  $form['fbstatus_interval'] = array(
    '#type' => 'select',
    '#title' => t('RSS fetch interval'),
    '#default_value' => variable_get('fbstatus_interval', 10),
    '#options' => array(1, 5, 10, 30, 60),
    '#description' => t('Minutes between Facebook RSS fetch. Data will be cached for this interval.')
  );
  $form['fbstatus_linkit'] = array(
    '#type' => 'radios',
    '#title' => t('Link status to item url'),
    '#default_value' => variable_get('fbstatus_linkit', 0),
    '#options' => array( t('No'), t('Yes')),
    '#description' => t('Make the status link to the original posting on Facebook.')
  );
  $form['fbstatus_displaytime'] = array(
    '#type' => 'radios',
    '#title' => t('Display timestamp'),
    '#default_value' => variable_get('fbstatus_displaytime', 0),
    '#options' => array( t('None'), t('Timestamp'), t('Elapsed time')),
    '#description' => t('Show the timestamp of the original status posting, or the time elapsed since the posting.'),
  );
  return system_settings_form($form);
}

/**
 * Implementation of hook_menu()
 */
function fbstatus_menu() {
  $items = array();
  $items['admin/settings/fbstatus'] = array(
    // 'path' => 'admin/settings/fbstatus',
    'title' => 'Facebook status',
    'description' => 'Configure the URL of your Facebook status feed',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fbstatus_admin'),
    'access arguments' => array('administer fbstatus'),
    'type' => MENU_NORMAL_ITEM,
   );
  return $items;
}


/**
 * Get the configured user's Facebook status from cache if possible,
 * otherwise from Facebook and cache the result
 * @return
 *  String containing the Facebook status, or an empty string
 */
function _fbstatus_get_status() {
  if (!user_access('access fbstatus')) return;
  if ((!$cache = cache_get('fbstatus')) || ($cache->expire < time())) {
    // get the status
    $statusurl = variable_get('fbstatus_url', '');
    if ($statusurl == '') return '';
    $result = drupal_http_request($statusurl);
    if ($result->code != '200') {
      watchdog('fbstatus', 'Could not fetch'. $statusurl);
      return '';
    }
    if (!$statusobject = simplexml_load_string($result->data)) {
      watchdog('fbstatus', 'Could not parse XML string');
      return '';
    }
    /*
    * PHP's simplexml has "hidden" values in returned objects,
    * so we have to cast the result to a string before trying to
    * serialize/unserialize. This issue surfaces in Drupal 6 because
    * of automatic serialization in the cache functions.
    */
    $status = (string) $statusobject->channel->item[0]->title; 
    if (!$status) return ''; // empty status, or some other nonsense ...    
    // if the user has chosen to link the status to the source item, do so
    if (variable_get('fbstatus_linkit',0))
    $status = '<a href="' . $statusobject->channel->item[0]->link . '">' . $status . '</a><br />';
    
    $unixtime = strtotime($statusobject->channel->item[0]->pubDate);
    // if the user has chosen to display a timestamp, do so
    if ((variable_get('fbstatus_displaytime',0) == 1) && $unixtime > 0){
      // Drupal short form timestamp
      $timestamp = format_date($unixtime, 'small');
      $status .= ' <small>' . $timestamp . '</small>';
    }
    if ((variable_get('fbstatus_displaytime',0) ==2) && $unixtime > 0){
      // Drupal elapsed time string
      $timestamp .= format_interval(time() - $unixtime,3);
      $status .= ' <small>' . $timestamp . ' ' . t('ago') .'</small>';
    }
    // cache the status and return the value.
    $interval = variable_get('fbstatus_interval', 10);
    cache_set('fbstatus', $status, 'cache',  time() + $interval * 60);
    return $status;
  }
  return $cache->data; 
}

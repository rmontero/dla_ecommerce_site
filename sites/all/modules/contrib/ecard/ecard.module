<?php

// $Id: ecard.module,v 1.1.4.22 2010/02/26 13:38:28 karst Exp $

/**
 * @file
 * This module can be used to send any node as an e-card.
 */

/**
 * Implementation of hook_perm().
 */
function ecard_perm() {
  return array('view ecards', 'send ecards', 'send own content as ecard');
}

/**
 * Implementation of hook_access().
 *
 * Used for checking if user has the rights to send ecard
 */
function ecard_form_access($uid) {
  return user_access('send ecards') || (user_access('send own content as ecard') && ($GLOBALS['user']->uid == $uid));
}

/**
 * Implementation of hook_menu().
 */
function ecard_menu() {

  $items['admin/settings/ecard'] = array(
      'title' => 'E-card settings',
      'description' => 'Change how ecards behave.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ecard_admin'),
      'access arguments' => array('administer site configuration'),
  );
  $items['ecard/view'] = array(
      'page callback' => 'ecard_view',
      'type' => MENU_CALLBACK,
      'access arguments' => array('view ecards'),
  );
  $items['ecard/thanks'] = array(
      'page callback' => 'ecard_thanks',
      'type' => MENU_CALLBACK,
      'access arguments' => array('view ecards'),
  );
  return $items;
}

/**
 * Implementation of hook_views_api().
 */
function ecard_views_api() {
  return array(
  'api' => 2,
  'path' => drupal_get_path('module', 'ecard'),
  );
}

/**
 * Define the settings form.
 */
function ecard_admin() {
  $form['settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Configuration'),
      '#collapsed' => FALSE,
      '#collapsible' => TRUE,
  );
  $form['settings']['ecard_nodetypes'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Choose the content types which you want to send as e-card'),
      '#options' => node_get_types('names'),
      '#default_value' => variable_get('ecard_nodetypes', array()),
  );
  $form['settings']['ecard_cron'] = array(
      '#type' => 'textfield',
      '#title' => t('Days to keep e-cards'),
      '#description' => t('E-cards older than the value entered here will automatically be deleted when cron runs. To prevent e-card deletion, set this value to 0.'),
      '#size' => '2',
      '#default_value' => variable_get('ecard_cron', '0'),
  );
  $form['settings']['ecard_max_count'] = array(
      '#type' => 'textfield',
      '#title' => 'Maximum number of emails allowed to send at a time',
      '#description' => 'The default value is 100. It is recommended to use a low number so mails sent from your server are not treated as spam. If "time out" errors or "white screens" occur then reduce the number.',
      '#size' => '5',
      '#default_value' => variable_get('ecard_max_count', '100'),
  );
  $form['settings']['ecard_thank_you_page'] = array(
      '#type' => 'textfield',
      '#title' => t('Path to thank you page'),
      '#default_value' => variable_get('ecard_thank_you_page', 'ecard/thanks'), '#description' => t('Enter the path to the thank you page where users should be redirected to after sending an e-card.  For example, <em>e-card/thanks</em>, <em>node/123</em>.  Leave blank for no redirection.'),
  );
  $form['settings']['ecard_hide_send_view'] = array(
      '#type' => 'checkbox',
      '#title' => t('Hide the send e-card form when viewing the e-card message.'),
      '#default_value' => variable_get('ecard_hide_send_view', 0),
  );
  $form['settings']['ecard_require_name'] = array(
      '#type' => 'checkbox',
      '#title' => t('Require the sender to provide their name.'),
      '#default_value' => variable_get('ecard_require_name', 0),
  );
  $form['settings']['ecard_require_message'] = array(
      '#type' => 'checkbox',
      '#title' => t('Require the sender to enter a personal message.'),
      '#default_value' => variable_get('ecard_require_message', 0),
  );
  $form['settings']['ecard_fill_in_name_email'] = array(
      '#type' => 'checkbox',
      '#title' => t('Automatically fill in sender name and email for logged in users.'),
      '#default_value' => variable_get('ecard_fill_in_name_email', 0),
  );
  $form['settings']['fieldset'] = array(
      '#type' => 'fieldset',
      '#title' => t('Message fieldset settings'),
      '#collapsed' => TRUE,
      '#collapsible' => TRUE,
  );
  $form['settings']['fieldset']['ecard_is_fieldset'] = array(
      '#type' => 'checkbox',
      '#title' => t('Put the e-card form in a fieldset?'),
      '#default_value' => variable_get('ecard_is_fieldset', 1),
  );
  $form['settings']['fieldset']['ecard_is_fieldset_collapsible'] = array(
      '#type' => 'checkbox',
      '#title' => t('Is the fieldset collapsible?'),
      '#default_value' => variable_get('ecard_is_fieldset_collapsible', 1),
  );
  $form['settings']['fieldset']['ecard_is_fieldset_collapsed'] = array(
      '#type' => 'checkbox',
      '#title' => t('Is the fieldset collapsed?'),
      '#default_value' => variable_get('ecard_is_fieldset_collapsed', 0),
  );

  $form['letter'] = array(
      '#type' => 'fieldset',
      '#title' => t('E-card delivery message'),
      '#collapsed' => TRUE,
      '#collapsible' => TRUE,
  );
  $form['letter']['ecard_subject'] = array(
      '#type' => 'textfield',
      '#title' => t('Subject'),
      '#default_value' => variable_get('ecard_subject', 'E-card from %site'),
      '#size' => 70,
      '#maxlength' => 70,
      '#description' => t('Customize the subject for e-card'),
  );
  $form['letter']['ecard_letter'] = array(
      '#type' => 'textarea',
      '#title' => t('Body'),
      '#default_value' => variable_get('ecard_letter', _ecard_letter()),
      '#cols' => 70,
      '#rows' => 5,
      '#description' => t('This text is the body of the email that the e-card recipient will see. These are the variables you may use: %site = your site name, %site_url = your site URL, %site_mail = your site email address, %card_url = the URL for the e-card, %sender = sender name, %sender_email = sender email, %recipient = recipient email'),
  );

  $form['copy'] = array(
      '#type' => 'fieldset',
      '#title' => t("Sender's e-card copy message"),
      '#collapsed' => TRUE,
      '#collapsible' => TRUE,
  );
  $form['copy']['ecard_copy_enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Send a copy of e-cards to sender'),
      '#default_value' => variable_get('ecard_copy_enabled', TRUE),
  );
  $form['copy']['ecard_copy_subject'] = array(
      '#type' => 'textfield',
      '#title' => t('Subject'),
      '#default_value' => variable_get('ecard_copy_subject', 'Copy of your e-card'),
      '#size' => 70,
      '#maxlength' => 70,
      '#description' => t('Customise the email sent to the sender as copy of the e-card.'),
  );
  $form['copy']['ecard_copy'] = array(
      '#type' => 'textarea',
      '#title' => t('Body'),
      '#default_value' => variable_get('ecard_copy', _ecard_copy()),
      '#cols' => 70,
      '#rows' => 5,
      '#description' => t('This text is the body of the email to notify the sender that his e-card has been picked up. These are the variables you may use: %site = your site name, %site_url = your site URL, %site_mail = your site email address, %card_url = the URL for the e-card'),
  );

  $form['notify'] = array(
      '#type' => 'fieldset',
      '#title' => t('E-card collection notification message'),
      '#collapsed' => TRUE,
      '#collapsible' => TRUE,
  );
  $form['notify']['ecard_notify_enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable option for e-card collection notification emails'),
      '#default_value' => variable_get('ecard_notify_enabled', TRUE),
  );
  $form['notify']['ecard_notify_subject'] = array(
      '#type' => 'textfield',
      '#title' => t('Subject'),
      '#default_value' => variable_get('ecard_notify_subject', 'Your e-card has been just picked up'),
      '#size' => 70,
      '#maxlength' => 70,
      '#description' => t('Customize the subject for e-card'),
  );
  $form['notify']['ecard_notify'] = array(
      '#type' => 'textarea',
      '#title' => t('Body'),
      '#default_value' => variable_get('ecard_notify', _ecard_notify()),
      '#cols' => 70,
      '#rows' => 5,
      '#description' => t('This text is the body of the email to notify the sender that the e-card has been picked up. These are the variables you may use: %site = your site name, %site_url = your site URL, %site_mail = your site email address, %card_url = the URL for the e-card, %sender = sender name, %recipient = recipient email'),
  );

  $form['array_filter'] = array('#type' => 'hidden');

  return system_settings_form($form);
}

/**
 * Implementation of hook_cron().
 */
function ecard_cron() {
// Convert cron days into timestamp.
  $ecard_cron = variable_get('ecard_cron', '0') * 86400;
  // Delete ecards older than setting.
  if (!empty($ecard_cron)) {
    db_query('DELETE FROM {ecard} WHERE send_time < %d', time() - $ecard_cron);
  }
}

/**
 * Function for making letter to send.
 */
function _ecard_letter() {
  $output = t(
      "Hi,

%sender made an e-card for you.
At any time you may see your card by clicking this link:

%card_url

(if your email client doesn't allow you to click on the site link,
then just copy and paste the URL into your browser)

admin");
  return $output;
}

/**
 * Implementation of hook_nodeapi().
 */
function ecard_nodeapi(&$node, $op, $teaser, $page) {
  if ($op === 'view' && ecard_types($node->type)) {
  // Add our form as a content item.
    if ($teaser === FALSE) {
    // No form if e-card view is set.
      if (!empty($node->content['ecard_view']) && variable_get('ecard_hide_send_view', 0)) {
        return;
      }
      $node->content['ecard_form'] = array(
          '#value' => drupal_get_form('ecard_form', $node),
          '#weight' => module_exists('content') ? content_extra_field_weight($node->type, 'ecard_form') : 100,
      );
    }
  }
}

function ecard_types($type) {
  if (!in_array($type, variable_get('ecard_nodetypes', array()))) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * Implements hook_content_extra_fields().
 */
function ecard_content_extra_fields($type) {
  if(!ecard_types($type)) {
    return array();
  }
  else {
    $extras['ecard_form'] = array(
        'label' => t('E-card form'),
        'description' => t('Displays the e-card form'),
        'weight' => 100,
    );
    return $extras;
  }
}

/**
 * Function to define the e-card form.
 */
function ecard_form($form_state, $node) {

  if (!ecard_form_access($node->uid)) {
    return $form;
  }
  // Sender's name.
  $form['name'] = array(
      '#title' => t('Sender name'),
      '#type' => 'textfield',
      '#required' => variable_get('ecard_require_name', 0),
      '#default_value' => variable_get('ecard_fill_in_name_email', 0) && user_is_logged_in() ? $GLOBALS['user']->name : '',
  );
  // Sender's email.
  $form['from_email'] = array(
      '#title' => t('Sender email'),
      '#type' => 'textfield',
      '#required' => TRUE,
      '#default_value' => variable_get('ecard_fill_in_name_email', 0) && user_is_logged_in() ? $GLOBALS['user']->mail : '',
  );

  // Display box to type recipients emails.
  $form['to_email'] = array(
      '#title' => t('E-mail(s) of recipient(s)'),
      '#type' => 'textarea',
      '#rows' => 3,
      '#default_value' => '',
      '#description' => t('You may enter multiple emails'),
      '#required' => TRUE
  );
  // Display textarea to type message.
  $form['message'] = array(
      '#title' => t('Type your message'),
      '#type' => 'textarea',
      '#description' => t('Whatever you type here will be attached to the e-card'),
      '#required' => variable_get('ecard_require_message', 0)
  );
  // Filter format for the text.
  $form['filter'] = filter_form();

  // Notification on pick up.
  if (variable_get('ecard_notify_enabled', TRUE)) {
    $form['notify'] = array(
        '#type' => 'checkbox',
        '#title' => t('Notify me when the e-card is picked up'),
        '#default_value' => 0
    );
  }

  $form['nid'] = array(
      '#type' => 'value',
      '#value' => $node->nid
  );
  $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Send This E-card'),
      '#weight' => 100
  );

  if (variable_get('ecard_is_fieldset', 1)) {
    $form_fieldset['block'] = array(
        '#type' => 'fieldset',
        '#title' => t('Send an E-card to your friends'),
        '#collapsible' => variable_get('ecard_is_fieldset_collapsible', 1),
        '#collapsed' => variable_get('ecard_is_fieldset_collapsed', 0),
        $form
    );
    $form = $form_fieldset;
  }
  return $form;
}

/**
 * Validation function for email syntax.
 */
function ecard_validate_emails($form_id, $form_state) {
  if (valid_email_address($form_state['values']['from_email']) != TRUE) {
    form_set_error('from_email', t('Your email address is invalid'));
  }
  $valid_emails = $failed_emails = array();
  $emails = array_unique(split("[,\n\r]", $form_state['values']['to_email']));
  foreach ($emails as $email) {
    $email = trim($email);
    if ($email) {
      if (valid_email_address($email)) {
        $valid_emails[] = $email;
      }
      else {
        $failed_emails[] = $email;
      }
    }
  }
  if (count($failed_emails)) {
    form_set_error('to_email', t('This email has an error "@email"', array('@email' => $failed_emails[0])));
  }
  return $valid_emails;
}

/**
 * Validation function for the form if call email_import of validate emails on respective steps.
 */
function ecard_form_validate($form_id, &$form_state) {
  $emails = ecard_validate_emails($form_id, $form_state);
  $count = count($emails);
  $max_count = variable_get('ecard_max_count', 1000);
  if ($count > $max_count) {
    form_set_error('to_email', t('You are not allowed to send to more than !count emails, please delete !diff email address and send the e-card', array('!count' => $max_count, '!diff' => $count - $max_count)));
  }
  form_set_value(array('#parents' => array('valid_emails')), $emails, $form_state);
}

/**
 * Submit handler for ecard_form.
 */
function ecard_form_submit($form_id, &$form_state) {
// Set up the ecard record.
  $ecard = new stdClass;
  $ecard->nid = $form_state['values']['nid'];
  $ecard->sender_name = $form_state['values']['name'];
  $ecard->sender_email = $form_state['values']['from_email'];
  $ecard->valid_emails = $form_state['values']['valid_emails'];
  $ecard->message = $form_state['values']['message'];
  $ecard->send_time = time();
  $ecard->send = 'y';
  $ecard->notify = $form_state['values']['notify'];
  $ecard->format = $form_state['values']['format'];

  // Send the e-cards, including copies.
  ecard_send_card($ecard);

  // Display a message.
  drupal_set_message(format_plural(count($form_state['values']['valid_emails']), 'Your e-card has been sent.', 'Your e-cards have been sent.'));

  // Redirect to thank you page if necessary.
  $thank_you_page = variable_get('ecard_thank_you_page', 'ecard/thanks');
  if (!empty($thank_you_page)) {
    $form_state['redirect'] = $thank_you_page;
  }
}

/**
 * Send e-cards, including copies if necessary.
 */
function ecard_send_card($ecard) {
  global $base_url;
  global $language;

  // Set the base variable from the clean url value.
  if (variable_get('clean_url', 0)) {
    $base = $base_url .'/';
  }
  else {
    $base = $base_url .'/index.php?q=';
  }

  // Iterate through each emails and send them and store a random number for
  // each.
  foreach ($ecard->valid_emails as $email) {
  // Append start value to random number to get cardid.
    $cardid =  md5(microtime() . $ecard->sender_email . $email);

    if (variable_get('ecard_notify_enabled', TRUE) && $ecard->notify == 1) {
    // Save record to the database.
      $ecard->notify = 'y';
    }
    else {
      $ecard->notify = 'n';
    }

    $ecard->random = $cardid;
    $ecard->recp_mail = $email;
    ecard_save_card($ecard);

    $params['card'] = $base .'ecard/view/'. $cardid;
    $params['sender'] = $ecard->sender_name;
    $params['sendermail'] = $ecard->sender_email;
    $params['recipient'] = $email;
    drupal_mail('ecard', 'ecard-mail', $email, $language, $params, $ecard->sender_email);
  }

  if (variable_get('ecard_copy_enabled', TRUE)) {
  // Making a copy for you else if you click any other recp link it will mail
  // notification also there is some problem while we produce random.
    $ecard->send = 'y';
    $ecard->notify = 'n';
    $ecard->random = md5(microtime() . $ecard->sender_email);
    $ecard->recp_mail = $ecard->sender_email;
    ecard_save_card($ecard);

    $card_copy_url = $base .'ecard/view/'. $ecard->random;
    drupal_set_message(t('You can view the e-card at <a href="!url">here</a>.', array('!url' => $card_copy_url)));

    $params['card_copy'] = $card_copy_url;
    drupal_mail('ecard', 'ecard-copy', $ecard->sender_email, $language, $params, variable_get('site_mail', ini_get('sendmail_from')));
  }
}

/**
 * Function for making copy url letter.
 */
function _ecard_copy() {
  $output = t(
      "Hi,
Here is the copy of your message you send
%card_url

(if your email client doesn't allow you to click on the site link,
then just copy and paste the URL into your browser)
admin");
  return $output;
}

/**
 * Function for making notification letter.
 */
function _ecard_notify() {
  $output = t(
      "Hi,

%recipient has picked up your e-card today.
Here is the url to your e-card
%card_url

(if your email client doesn't allow you to click on the site link,
then just copy and paste the URL into your browser)

admin");
  return $output;
}

/**
 * Load a message and details based on the random string and let other modules
 * act on it.
 */
function ecard_load_card($random) {
  $sql = 'SELECT random, nid, message, sender_name, sender_email, recp_mail, notify, format FROM {ecard} AS ec WHERE ec.random = "%s"';
  $ecard = db_fetch_object(db_query($sql, $random));
  drupal_alter('ecard_load', $ecard);
  return $ecard;
}

/**
 * Save ecard to the database and let other modules act on it.
 */
function ecard_save_card($ecard) {
  drupal_alter('ecard_save', $ecard);
  drupal_write_record('ecard', $ecard);
  return $ecard;
}

/**
 * Save ecard to the database and let other modules act on it.
 * Same as save but with a primarykey "random" required for update.
 */
function ecard_update_card($ecard) {
  if(!$ecard->random) {
    return FALSE;
  }
  return ecard_save_card($ecard);
}

/**
 * Save ecard to the database and let other modules act on it.
 */
function ecard_delete_card($random) {
  return db_query('DELETE FROM {ecard} AS ec WHERE ec.random = "%s"', $random);
}

/**
 * Function to view the e-card , it also send an email to the sender to know the
 * card is picked up.
 */
function ecard_view($arg1 = NULL) {
  global $base_url;
  // Set the base variable from the clean url value.
  if (variable_get('clean_url', 0)) {
    $base = $base_url .'/';
  }
  else {
    $base = $base_url .'/index.php?q=';
  }
  if (isset($arg1)) {

    $ecard = ecard_load_card($arg1);

    if ($ecard != NULL) {
      $node = node_load($ecard->nid);
      $node->content['ecard_view'] = array(
          '#value' => theme('ecard_message', check_markup($ecard->message, $ecard->format)),
          '#weight' => 90,
      );

      $output = node_view($node, FALSE, TRUE, FALSE);

      // Sending email if notify == yes.
      if ($ecard->notify == 'y') {
        $card_url = $base .'ecard/view/'. $ecard->random;

        // Make message.
        $site_email = variable_get('site_mail', ini_get('sendmail_from'));
        $params['site'] = $site_email;
        $params['card_url'] = $card_url;
        $params['sender'] = $ecard->sender_name;
        $params['recipient'] = $ecard->recp_mail;
        $params['sender_email'] = $ecard->sender_email;
        drupal_mail('ecard', 'ecard-notify', $params['sender_email'], NULL, $params, $site_email);
        db_query("UPDATE {ecard} SET notify='n' WHERE random='%s'", $ecard->random);
      }
    }
    else {
      return t('Your e-card id is not valid either it may be an error or it expired.');
    }
    return $output;
  }
  else {
    drupal_goto();
  }
}

/**
 * Implementation hook_mail().
 */
function ecard_mail($key, &$message, $params) {
  global $base_url;
  switch ($key) {
    case 'ecard-mail':
      $variables = array(
          '%site' => variable_get('site_name', 'drupal'),
          '%site_url' => $base_url,
          '%site_mail' => variable_get('site_mail', ini_get('sendmail_from')),
          '%card_url' => $params['card'],
          '%sender' => $params['sender'],
          '%sender_email' => $params['sendermail'],
          '%recipient' => $params['recipient'],
      );
      $body = strtr(variable_get('ecard_letter', _ecard_letter()), $variables);
      $subject = strtr(variable_get('ecard_subject', 'An E-card from %sender'), $variables);
      $message['subject'] = $subject;
      $message['body'] = $body;
      break;

    case 'ecard-copy':
      $variables = array(
          '%site' => variable_get('site_name', 'drupal'),
          '%site_url' => $base_url,
          '%site_mail' => variable_get('site_mail', ini_get('sendmail_from')),
          '%card_url' => $params['card_copy'],
      );
      $body = strtr(variable_get('ecard_copy', _ecard_copy()), $variables);
      $subject = strtr(variable_get('ecard_copy_subject', 'Copy of your E-card'), $variables);
      $message['subject'] = $subject;
      $message['body'] = $body;
      break;

    case 'ecard-notify':
      $variables = array(
          '%site' => variable_get('site_name', 'drupal'),
          '%site_url' => $base_url,
          '%site_mail' => variable_get('site_mail', ini_get('sendmail_from')),
          '%card_url' => $params['card_url'],
          '%sender' => $params['sender'],
          '%recipient' => $params['recipient'],
          '%sender_email' => $params['sender_email'],
      );
      $body = strtr(variable_get('ecard_notify', _ecard_notify()), $variables);
      $subject = strtr(variable_get('ecard_notify_subject', 'Your card has been picked up by %recipient'), $variables);
      $message['subject'] = $subject;
      $message['body'] = $body;
      break;
  }
}

/**
 * Function for the thank-you page.
 */
function ecard_thanks() {
  return t('Thanks, and have a nice day.');
}

/**
 * Implementation of hook_theme().
 */
function ecard_theme() {
  return array(
  'ecard_message' => array(
  'arguments' => array('message'),
  ),
  );
}

/**
 * Theme function to display e-card message.
 */
function theme_ecard_message($message) {
  return theme('fieldset',
  array(
  '#title' => t('Message'),
  '#collapsible' => TRUE,
  '#collapsed' => FALSE,
  '#value' => $message,
  )
  );
}

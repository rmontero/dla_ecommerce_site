<?php
// $Id: follow.module,v 1.1.2.14 2009/10/06 15:19:26 q0rban Exp $

/**
 * @file
 *   Allows users to add links to their social network profiles.
 */

define('FOLLOW_NAME', 0);
define('FOLLOW_ME', 1);
define('FOLLOW_US', 2);

/**
 * Implementation of hook_help().
 */
function follow_help($path, $arg) {
  switch ($path) {
    case 'follow':
    case 'user/%/follow':
      return t('Please copy and paste urls for each service you would like to display in the block.');
    case 'admin/settings/follow':
      return t('Here you can set what the default titles are for the "follow" blocks.  If you would like a custom title, edit the individual blocks <a href="!href">here</a>.', array('!href' => url('admin/build/block')));
  }
}

/**
 * Implementation of hook_init().
 */
function follow_init() {
  drupal_add_css(drupal_get_path('module', 'follow') .'/follow.css');
}

/**
 * Implementation of hook_menu().
 */
function follow_menu() {
  $items = array();

  $items['admin/build/follow'] = array(
    'title' => 'Site follow links',
    'description' => 'Add sitewide follow links',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('follow_links_form'),
    'access arguments' => array('edit site follow links'),
  );

  $items['user/%/follow'] = array(
    'title' => 'My follow links',
    'description' => 'edit follow links',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('follow_links_form', 1),
    'access callback' => 'follow_links_user_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );

  // No settings!
  /* $items['admin/settings/follow'] = array(
    'title' => 'Follow',
    'description' => 'Administer the follow module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('follow_settings_form'),
    'access arguments' => array('administer follow'),
  ); */

  return $items;
}

/**
 * Access callback for user follow links editing.
 */
function follow_links_user_access($uid) {
  return ((($GLOBALS['user']->uid == $uid) && user_access('edit own follow links')) || user_access('edit any user follow links')) && $uid > 0;
}

/**
 * Implementation of hook_perm().
 */
function follow_perm() {
  return array('edit own follow links', 'edit site follow links', 'edit any user follow links', 'administer follow');
}

/**
 * Implementation of hook_theme().
 */
function follow_theme() {
  $items = array();

  $items['follow_links_form'] = array(
    'arguments' => array('form' => array()),
  );
  $items['follow_links'] = array(
    'arguments' => array('links' => array(), 'networks' => array()),
  );
  $items['follow_link'] = array(
    'arguments' => array('link' => NULL, 'title' => NULL),
  );

  return $items;
}

/**
 * Implementation of hook_block().
 */
function follow_block($op = 'list', $delta = 'site', $edit = array()) {
  if ($op == 'list') {
    $blocks['site'] = array(
      'info' => t('Follow Site'),
      'cache' => BLOCK_CACHE_GLOBAL,
    );

    $blocks['user'] = array(
      'info' => t('Follow User'),
      'cache' => BLOCK_CACHE_PER_PAGE,
    );

    return $blocks;
  }
  elseif ($op == 'configure') {
    switch($delta) {
      case 'site':
        $form['follow_title'] = array(
          '#type' => 'radios',
          '#title' => t('Default block title'),
          '#default_value' => variable_get('follow_site_block_title', FOLLOW_NAME),
          '#options' => array(
            FOLLOW_NAME => t('Follow @name on', array('@name' => variable_get('site_name', 'Drupal'))),
            FOLLOW_ME => t('Follow me on'),
            FOLLOW_US => t('Follow us on'),
          ),
        );
        $form['follow_user'] = array(
          '#type' => 'checkbox',
          '#title' => t('User pages'),
          '#description' => t('Should this block display on user profile pages?'),
          '#default_value' => variable_get('follow_site_block_user', TRUE),
        );
        return $form;

      case 'user':
        $form['follow_title'] = array(
          '#type' => 'radios',
          '#title' => t('Default block title'),
          '#default_value' => variable_get('follow_user_block_title', FOLLOW_NAME),
          '#options' => array(
            FOLLOW_NAME => t('Follow [username] on'),
            FOLLOW_ME => t('Follow me on'),
          ),
        );
        return $form;
    }
  }
  elseif ($op == 'save') {
    variable_set('follow_'. $delta .'_block_title', $edit['follow_title']);
    if ($delta == 'site') {
      variable_set('follow_site_block_user', $edit['follow_user']);
    }
  }
  elseif ($op == 'view') {  
    switch ($delta) {
      case 'site':
        if (($content = _follow_block_content())
            && (variable_get('follow_site_block_user', TRUE) || !(arg(0) == 'user' && is_numeric(arg(1))))) {
          return array(
            'subject' => _follow_block_subject(),
            'content' => $content,
          );
        }
        break;
      case 'user':
        $uid = arg(1);
        if (arg(0) == 'user' && is_numeric($uid) && ($content = _follow_block_content($uid))) {
          return array(
            'subject' => _follow_block_subject($uid),
            'content' => $content,
          );
        }
        break;
    }
  }
}

/**
 * Helper function to build the block title.
 *
 * @param $uid
 *   The uid of the user account.  Defaults to the site form, $uid = 0.
 */
function _follow_block_subject($uid = 0) {
  return follow_link_title($uid) .':';
}

/**
 * Helper function to create a link or block title.
 *
 * @param $uid
 *   The uid of the user account.  Defaults to the site form, $uid = 0.
 */
function follow_link_title($uid = 0) {
  // Check to see if we have a valid username.
  if ($uid) {
    $setting = variable_get('follow_user_block_title', FOLLOW_NAME);
    // Special handling for usernames.
    if ($setting == FOLLOW_NAME) {
      $account = user_load($uid);
      // Set plain to TRUE for realname module support.
      return t('Follow !name on', array('!name' => theme('username', $account, array('plain' => TRUE))));
    }
    return t('Follow me on');
  }

  switch(variable_get('follow_site_block_title', FOLLOW_NAME)) {
    case FOLLOW_NAME:
      return t('Follow @name on', array('@name' => variable_get('site_name', 'Drupal')));

    case FOLLOW_ME:
      return t('Follow me on');

    case FOLLOW_US:
      return t('Follow us on');
  }
}

/**
 * Helper function to build the block content display.
 *
 * @param $uid
 *   The uid of the user account.  Defaults to the site form, $uid = 0.
 */
function _follow_block_content($uid = 0) {
  $output = '';

  if ($links = follow_links_load($uid)) {
    $output = theme('follow_links', $links, follow_networks_load());
    $output .= _follow_block_config_links($uid);
  }

  return $output;
}

/**
 * Theme function to output a list of links.
 *
 * @param $links
 *   An array of follow link objects.
 * @param $networks
 *   An array of network names, keys are machine names, values are visible titles.
 *
 * @ingroup themeable
 */
function theme_follow_links($links, $networks) {
  $output = '<div class="follow-links clear-block">';

  foreach($links as $link) {
    $title = $networks[$link->name];
    $output .= theme('follow_link', $link, $title);
  }

  $output .= '</div>';
  return $output;
}

/**
 * Theme function to print an individual link.
 *
 * @param $link
 *   A follow link object.
 * @param $title
 *   The translated title of the social network.
 *
 * @ingroup themable
 */
function theme_follow_link($link, $title) {
  $classes = array();
  $classes[] = 'follow-link';
  $classes[] = "follow-link-{$link->name}";
  $classes[] = $link->uid ? 'follow-link-user' : 'follow-link-site';
  $attributes = drupal_attributes(array(
    'class' => implode(' ', $classes),
    'href' => $link->url,
    'title' => follow_link_title($link->uid) .' '. $title,
  ));

  return "<a$attributes>$title</a>\n";
}

/**
 * Outputs a list of configuration links for users with appropriate permissions
 *
 * @param $uid
 *   The uid of the user account.  Defaults to the site form, $uid = 0.
 * @return
 *   A string containing the links, output with theme_links().
 */
function _follow_block_config_links($uid) {
  $links = array();

  if ($uid == 0 && user_access('edit site follow links')) {
    $links['follow_edit'] = array(
      'title' => t('Edit'),
      'href' => 'admin/build/follow',
      'query' => drupal_get_destination(),
    );
  }
  elseif (follow_links_user_access($uid)) {
    $links['follow_edit'] = array(
      'title' => t('Edit'),
      'href' => 'user/'. $uid .'/follow',
      'query' => drupal_get_destination(),
    );
  }

  if (user_access('administer blocks')) {
    $links['follow_configure'] = array(
      'title' => t('Configure'),
      'href' => $uid ? 'admin/build/block/configure/follow/user' : 'admin/build/block/configure/follow/site',
      'query' => drupal_get_destination(),
    );
  }

  return theme('links', $links, array('class' => 'links inline'));
}


/**
 * The form for editing follow links.
 *
 * @param $form_state
 *   A keyed array containing the current state of the form.
 * @param $uid
 *   The uid of the user account.  Defaults to the site form, $uid = 0.
 *
 * @ingroup forms
 */
function follow_links_form(&$form_state, $uid = 0) {
  $form = array();

  $form['uid'] = array('#type' => 'hidden', '#value' => $uid);
  $form['follow_links']['#tree'] = TRUE;

  $links = follow_links_load($uid);
  $networks = follow_networks_load(TRUE);

  // Put all our existing links at the top, sorted by weight.
  if (is_array($links)) {
    foreach ($links as $name => $link) {
      $title = $networks[$name];
      $form['follow_links'][$name] = _follow_links_form_link($link, $title);
      // Unset this specific network so we don't add the same one again below.
      unset($networks[$name]);
    }
  }
  // Now add all the empty ones.
  foreach ($networks as $name => $title) {
    $link = new stdClass();
    $form['follow_links'][$name] = _follow_links_form_link($link, $title);
  }

  $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));

  return $form;
}

/**
 * Helper function to create an individual link form element.
 */
function _follow_links_form_link($link, $title) {
  $elements = array();

  $elements['name'] = array(
    '#type' => 'markup',
    '#value' => $title,
  );
  if (isset($link->lid)) {
    $elements['lid'] = array(
      '#type' => 'hidden',
      '#value' =>  $link->lid,
    );
    $elements['weight'] = array(
      '#type' => 'weight',
      '#default_value' => $links->weight,
    );
  }
  $elements['url'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($link->url) ? $link->url : '',
    '#element_validate' => array('follow_url_validate'),
  );

  return $elements;
}

/**
 * Validates the url field to verify it's actually a url.
 */
function follow_url_validate($form) {
  $url = trim($form['#value']);
  if($url && !preg_match("/^[a-zA-Z]+[:\/\/]+[A-Za-z0-9\-_]+\\.+[A-Za-z0-9\.\/%&=\?\-_]+$/i", $url)) {
    form_error($form, t('The specified url is invalid.'));
  }
}

/**
 * Submit handler for the follow_links_form.
 */
function follow_links_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  $links = $values['follow_links'];

  foreach($links as $name => $link) {
    $link = (object) $link;
    $link->url = trim($link->url);

    // Check to see if there's actually a link
    if (empty($link->url)) {
      // If there's an lid, delete the link.
      if (isset($link->lid)) {
        follow_link_delete($link->lid);
      }
      // Continue to the next link.
      continue;
    }
    // Otherwise save the link.
    else {
      $link->uid = $values['uid'];
      $link->name = $name;
      follow_link_save($link);
    }
  }
}

/**
 * Theme the drag-and-drop form.
 *
 * Arranges records in a table, and adds the css and js for draggable sorting.
 *
 * @ingroup themeable
 * @ingroup forms
 */
function theme_follow_links_form($form) {
  $rows = array();
  $disabled_rows = array();

  foreach (element_children($form['follow_links']) as $key) {
    $row = array();
    $disabled_row = array();

    if (isset($form['follow_links'][$key]['weight'])) {
      $row[] = drupal_render($form['follow_links'][$key]['lid']) . drupal_render($form['follow_links'][$key]['name']);
      $row[] = drupal_render($form['follow_links'][$key]['url']);
  
      // Now, render the weight row.
      $form['follow_links'][$key]['weight']['#attributes']['class'] = 'follow-links-weight';
      $row[] = drupal_render($form['follow_links'][$key]['weight']);
  
      // Add the new row to our collection of rows, and give it the 'draggable' class.
      $rows[] = array(
        'data' => $row,
        'class' => 'draggable',
      );
    }
    else {
      $disabled_rows[] = array(drupal_render($form['follow_links'][$key]['name']), drupal_render($form['follow_links'][$key]['url']));
    }
  }

  // Render a list of header titles, and our array of rows, into a table.
  $header = array(t('Name'), t('URL'), t('Weight'));
  $disabled_header = array(t('Name'), t('URL'));

  $output = '';
  if (count($rows)) {
    $output .= theme('table', $header, $rows, array('id' => 'follow-links-weighted-form'));
  }
  if (count($disabled_rows)) {
    $output .= theme('table', $disabled_header, $disabled_rows);
  }
  $output .= drupal_render($form);

  drupal_add_tabledrag('follow-links-weighted-form', 'order', 'self', 'follow-links-weight');

  return $output;
}

/**
 * Follow settings form.
 *
 * @ingroup forms
 */
function follow_settings_form() {
  $form = array();

  return system_settings_form($form);
}


/**
 * Loader function for individual links.
 *
 * @param $uid
 *   An int containing the uid of the user. uid 0 pulls the site follow links.
 * @return
 *   A single link in array format, or FALSE if none matched the incoming ID.
 */
function follow_links_load($uid = 0) {
  $links = array();

  $sql = "SELECT * FROM {follow_links} WHERE uid = %d ORDER BY weight ASC";
  $result = db_query($sql, $uid);

  while ($link = db_fetch_object($result)) {
    $links[$link->name] = $link;
  }

  return $links;
}

/**
 * Inserts a new link, or updates an existing one.
 *
 * @param $link
 *   A link object to be saved.
 */
function follow_link_save($link) {
  if (isset($link->lid)) {
    drupal_write_record('follow_links', $link, 'lid');
  }
  else {
    drupal_write_record('follow_links', $link);
  }
  return $link;
}

/**
 * Deletes a link, given its unique ID.
 *
 * @param $lid
 *   An int containing the ID of a link.
 */
function follow_link_delete($lid) {
  $sql = 'DELETE FROM {follow_links} WHERE lid = %d';
  db_query($sql, $lid);
}


/**
 * Loads all follow networks
 *
 * @param $reset
 *   Boolean.  If TRUE, flushes the follow networks cache.
 *
 * @return
 *   An array of network names, keys are machine names, values are visible titles.
 */
function follow_networks_load($reset = FALSE) {
  static $networks = array();

  // Clear cache if $reset is TRUE;
  if ($reset) {
    $networks = array();
    cache_clear_all('follow:networks', 'cache');
  }
  // Return presets if the array is populated.
  if (!empty($networks)) {
    return $networks;
  }

  // Grab from cache or build the array of networks.
  if (($cache = cache_get('follow:networks', 'cache')) && is_array($cache->data)) {
    $networks = $cache->data;
  }
  else {
    // We don't have an API to create new networks yet, so for now, we only call hook_follow_networks().
    $networks = module_invoke_all('follow_networks');
    cache_set('follow:networks', $networks);
  }
  return $networks;
}

/**
 * Implementation of hook_follow_networks().
 *
 * @return
 *   An array of network names, keys are machine names, values are visible titles.
 */
function follow_follow_networks() {
  return array(
    'facebook'  => t('Facebook'),
    'virb'      => t('Virb'),
    'myspace'   => t('MySpace'),
    'twitter'   => t('Twitter'),
    'picasa'    => t('Picasa'),
    'flickr'    => t('Flickr'),
    'youtube'   => t('YouTube'),
    'vimeo'     => t('Vimeo'),
    'bliptv'    => t('blip.tv'),
    'lastfm'    => t('last.fm'),
    'linkedin'  => t('LinkedIn'),
    'delicious' => t('Delicious'),
    'tumblr'    => t('Tumblr'),
  );
}
